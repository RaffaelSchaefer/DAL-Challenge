<script lang="ts">
    import { Container } from "@sveltestrap/sveltestrap";
    import Navigation from "../components/Navigation.svelte";
    import DALEmpolyeeView from "../components/DALEmployeeView.svelte"

    import { onMount } from 'svelte';
    import PocketBase from 'pocketbase';

    interface Contract {
        id: string;
        asset: string;
        assetDetails?: Asset;
        customerDetails?: Asset;
        customers: string;
    }

    interface Asset {
        id: string;
        name: string;
    }

    interface Customer {
    id: string;
    name: string;
    url: string;
    // Add any other relevant customer properties here
    }


    interface GroupedContract {
        id: string;
        assets: Asset[];
        customers: Customer[];
    }

    let vis = true;
    let groupedContracts: GroupedContract[] = [];

    const pb = new PocketBase('http://10.32.6.48:8090');

    async function fetchData() {
        try {
            // Authentifizierung
            const authData = await pb.admins.authWithPassword('s20a3c@umwelt-campus.de', 'code-a-thon2024');
            
            // Überprüfen, ob die Authentifizierung erfolgreich war
            if (pb.authStore.isValid && pb.authStore.model) {
                console.log('Authenticated successfully');
                console.log('Token:', pb.authStore.token);
                console.log('Admin ID:', pb.authStore.model.id);

                // Abrufen der Vertragsdaten
                const contracts = await pb.collection('contracts').getFullList<Contract>();
                
                for (const contract of contracts) {
                    const asset = await pb.collection('assets').getOne<Asset>(contract.asset);
                    const customer = await pb.collection('customers').getOne<Customer>(contract.customers);
                    contract.assetDetails = asset;
                    contract.customerDetails = customer;
                }


                // Abrufen der zugehörigen Asset-Daten
                for (const contract of contracts) {
                    const asset = await pb.collection('assets').getOne<Asset>(contract.asset);
                    contract.assetDetails = asset;
                }

            
                // Verträge nach ID ohne Suffix gruppieren
                const contractMap: { [key: string]: GroupedContract } = {};
                for (const contract of contracts) {
                    const baseId = contract.id.split('_')[0];
                    if (!contractMap[baseId]) {
                        contractMap[baseId] = { id: baseId, assets: [], customers: [] };
                    }
                    contractMap[baseId].assets.push(contract.assetDetails);
                    contractMap[baseId].customers.push(contract.customerDetails); // Push customer info into the customers array
                }

                groupedContracts = Object.values(contractMap);

                // Logout
                pb.authStore.clear();
            } else {
                console.error('Authentication failed or auth model is null');
            }
        } catch (error) {
            console.error('Fehler beim Abrufen der Daten:', error);
        }
    }

    fetchData();
</script>

<svelte:head>
    <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
    />
    <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css"
    />
</svelte:head>

<Navigation />

<style>
    @import "https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css";

    .col {
        border-style: solid;
        border-radius: 5px;
    }
    .col-8 {
        border-style: solid;
        border-radius: 5px;
    }
    .row {
        border-style: solid;
        border-radius: 5px;
    }
</style>


<div class="container">
    {#each groupedContracts as groupedContract}
        <div class="row">
            <div class="col">
                <h3>Grouped Contract ID: {groupedContract.id}</h3>
                <ul>
                    {#each groupedContract.assets as asset}
                        <li>
                            <p>Asset ID: {asset.id}</p>
                            <p>Asset Name: {asset.type}</p>
                        </li>
                    {/each}
                </ul>
            </div>
            <div class="col-8">
                <h3>Customers:</h3>
                <ul>
                    {#each groupedContract.customers as customer}
                        <li>
                            <p>Customer ID: {customer.id}</p>
                            <p>Customer Name: {customer.name}</p>
                        </li>
                    {/each}
                </ul>
            </div>
        </div>
    {/each}
</div>
